window.quizData = {
  "title": "COS 121 - Problem Solving",
  "questions": [
    // --- Segment 1: Abstraction & Decomposition (Questions 1-50) ---
    // Abstraction Concepts (1-20)
    { "question": "What is abstraction in problem-solving?", "options": ["Breaking a problem into smaller parts", "Focusing on essential details and ignoring irrelevant ones", "Writing code in a specific language", "Testing all possible solutions"], "answer": "Focusing on essential details and ignoring irrelevant ones", "explanation": "Abstraction is the process of hiding complex implementation details while showing only the essential features. It helps manage complexity by focusing on what's important and ignoring irrelevant details." },
    { "question": "In the elevator system example, what is an 'essential detail' you care about with abstraction?", "options": ["The brand of the elevator buttons", "The color of the elevator interior", "The floors (states) and requests (inputs)", "The material of the handrails"], "answer": "The floors (states) and requests (inputs)", "explanation": "When abstracting an elevator system, we focus on the functional aspects like which floors exist and what requests are made, rather than aesthetic details like button brands or interior colors." },
    { "question": "Which of these is a key idea of abstraction?", "options": ["Focus on every detail", "Solve smaller tasks independently", "Ignore unnecessary complexity", "Combine solutions to solve the overall problem"], "answer": "Ignore unnecessary complexity" },
    { "question": "How does abstraction help with 'Information Overload'?", "options": ["By adding more details to consider", "By filtering out unnecessary details", "By creating a complex diagram", "By requiring a faster computer"], "answer": "By filtering out unnecessary details" },
    { "question": "Abstraction often leads to identifying a more ____ version of a problem.", "options": ["specific", "complex", "general", "confusing"], "answer": "general" },
    { "question": "Realizing a new problem is similar to one you've solved before and reusing patterns is a benefit of abstraction called...?", "options": ["Improves Clarity", "Facilitates Generalization", "Promotes Reusability", "Reduces Information Overload"], "answer": "Promotes Reusability" },
    { "question": "Which is NOT a listed benefit of abstraction?", "options": ["Highlights Essential Elements", "Improves Clarity", "Increases Complexity", "Promotes Reusability"], "answer": "Increases Complexity" },
    { "question": "Abstraction helps you see the fundamental ____ of a problem.", "options": ["solution", "irrelevant details", "structure", "difficulty"], "answer": "structure" },
    { "question": "In the Library System example, what is something we can IGNORE using abstraction?", "options": ["The availability of a book", "The user's borrowing history", "The furniture in the library", "The due date of a book"], "answer": "The furniture in the library" },
    { "question": "What do we CARE about in the Library System example?", "options": ["The color of the books", "The exact building layout", "The process to borrow/return books", "The number of windows in the library"], "answer": "The process to borrow/return books" },
    { "question": "Abstraction makes it easier to apply known solutions or...?", "options": ["biases", "opinions", "algorithms", "complexities"], "answer": "algorithms" },
    { "question": "In the abstract view of a library, 'A collection of books' represents...?", "options": ["a function", "a process", "data", "an interface"], "answer": "data" },
    { "question": "In the abstract view of a library, the 'process to borrow/return books' represents...?", "options": ["data", "a class", "a variable", "functions"], "answer": "functions" },
    { "question": "In the class diagram for the 'Book' class, which is NOT listed as an attribute?", "options": ["title", "author", "isAvailable", "borrowerName"], "answer": "borrowerName" },
    { "question": "In the class diagram for the 'User' class, which is a listed method (function)?", "options": ["name", "borrowedBooks", "returnBook()", "checkOverdue()"], "answer": "returnBook()" },
    { "question": "What is the focus of Abstraction, according to the comparison table?", "options": ["Dividing into smaller parts", "Step-by-step process", "Simplifying, generalizing", "Solving step-by-step"], "answer": "Simplifying, generalizing" },
    { "question": "What is the goal of Abstraction?", "options": ["To solve a problem step-by-step", "To remove unnecessary details", "To divide into smaller parts", "To create a detailed plan"], "answer": "To remove unnecessary details" },
    { "question": "The approach of Abstraction is described as...?", "options": ["High-level thinking", "Low-level implementation", "Step-by-step process", "Code writing"], "answer": "High-level thinking" },
    { "question": "Which key idea of abstraction involves finding core patterns or relationships?", "options": ["Ignore unnecessary complexity", "Identify core patterns", "Focus on what matters", "Solve smaller tasks"], "answer": "Identify core patterns" },
    { "question": "A simplified view of a problem, thanks to abstraction, is easier to...?", "options": ["make more complex", "hide from others", "communicate and reason about", "forget"], "answer": "communicate and reason about" },
    
    // Decomposition Concepts (21-40)
    { "question": "What is decomposition in problem-solving?", "options": ["Simplifying a problem by ignoring details", "Focusing on the big picture only", "Breaking a complex problem into smaller, manageable sub-problems", "Finding a single, elegant solution"], "answer": "Breaking a complex problem into smaller, manageable sub-problems", "explanation": "Decomposition is a divide-and-conquer approach where we break down complex problems into smaller, more manageable pieces that can be solved independently and then combined for the overall solution." },
    { "question": "What is a key idea of decomposition?", "options": ["Ignore unnecessary complexity", "High-level thinking", "Divide and conquer approach", "Focus on essential details"], "answer": "Divide and conquer approach" },
    { "question": "In the social media app example, which is a sub-problem created by decomposition?", "options": ["The overall app design", "User authentication", "The app's marketing plan", "The company's profit margin"], "answer": "User authentication" },
    { "question": "How does decomposition simplify complexity?", "options": ["By making the problem bigger", "By breaking a daunting problem into smaller chunks", "By adding more requirements", "By ignoring the problem"], "answer": "By breaking a daunting problem into smaller chunks" },
    { "question": "The benefit that each sub-problem is typically easier to understand and solve independently is called...?", "options": ["Improves Understanding", "Simplifies Complexity", "Increases Tractability", "Facilitates Parallel Work"], "answer": "Increases Tractability" },
    { "question": "Assigning smaller sub-problems to different teams to work on at the same time is known as...?", "options": ["Easier Debugging", "Improves Understanding", "Simplifies Complexity", "Facilitates Parallel Work"], "answer": "Facilitates Parallel Work" },
    { "question": "Why is debugging easier with decomposition?", "options": ["The code has no errors", "It's easier to isolate an issue to a specific sub-problem", "The entire system is simple", "The errors are automatically fixed"], "answer": "It's easier to isolate an issue to a specific sub-problem" },
    { "question": "In the Library System example, which is a sub-problem created by decomposition?", "options": ["The physical layout of the library", "Book Management", "The librarian's salary", "The color of the library card"], "answer": "Book Management" },
    { "question": "Under the 'User Management' sub-problem, which task is listed?", "options": ["Add new books", "Check overdue status", "Track user borrowing history", "Apply fines"], "answer": "Track user borrowing history" },
    { "question": "Under the 'Borrowing System' sub-problem, which task is NOT listed?", "options": ["Borrow a book", "Return a book", "Register new users", "Check overdue status"], "answer": "Register new users" },
    { "question": "The focus of Decomposition, according to the comparison table, is...?", "options": ["Simplifying, generalizing", "Removing unnecessary details", "High-level thinking", "Dividing into smaller parts"], "answer": "Dividing into smaller parts" },
    { "question": "What is the goal of Decomposition?", "options": ["To remove unnecessary details", "To solve a problem step-by-step", "To get a high-level understanding", "To ignore button color"], "answer": "To solve a problem step-by-step" },
    { "question": "The approach of Decomposition is described as a...?", "options": ["High-level thinking", "Simplifying process", "Step-by-step process", "Generalizing process"], "answer": "Step-by-step process" },
    { "question": "Which key aspect of decomposition helps in gaining a clearer understanding of the overall problem?", "options": ["Simplifies Complexity", "Improves Understanding", "Increases Tractability", "Facilitates Parallel Work"], "answer": "Improves Understanding" },
    { "question": "Decomposition can reveal sub-problems that are common or have existing solutions, which 'Identifies...?'", "options": ["New Problems", "Reusable Components", "Complex Systems", "Final Solutions"], "answer": "Reusable Components" },
    { "question": "The 'Divide and conquer' approach is central to...?", "options": ["Abstraction", "Decomposition", "Generalization", "Reusability"], "answer": "Decomposition" },
    { "question": "In the diagram for decomposition, 'Big problem' is at the top, and it's broken into...?", "options": ["One solution", "Main components", "Irrelevant details", "A bigger problem"], "answer": "Main components" },
    { "question": "After breaking a problem down, the key ideas of decomposition include solving smaller tasks independently and then...?", "options": ["Ignoring them", "Starting over", "Combining solutions to solve the overall problem", "Abstracting them away"], "answer": "Combining solutions to solve the overall problem" },
    { "question": "'Handling comments and likes' is a decomposed part of what example problem?", "options": ["Library System", "Elevator System", "Social media app", "Payroll System"], "answer": "Social media app" },
    { "question": "Each part of a decomposed problem can be solved...?", "options": ["Only by one person", "Separately", "Only after the whole problem is solved", "Simultaneously by one person"], "answer": "Separately" },
    
    // Abstraction + Decomposition & Problem-Solving Process (41-50)
    { "question": "How do abstraction and decomposition often work together?", "options": ["They are used at completely different times", "They are opposing techniques", "They are often used in tandem", "One makes the other unnecessary"], "answer": "They are often used in tandem" },
    { "question": "You might decompose a problem first, and then ____ each sub-problem.", "options": ["combine", "solve", "abstract", "ignore"], "answer": "abstract" },
    { "question": "Conversely, you might abstract the overall problem first to get a high-level understanding, and then ____ that abstracted problem.", "options": ["solve", "decompose", "generalize", "ignore"], "answer": "decompose" },
    { "question": "According to the 'When to Perform' table, at what step should you START Abstraction?", "options": ["Analyze the Problem", "Devising a Plan", "Understand the Problem", "Carrying out the Plan"], "answer": "Understand the Problem" },
    { "question": "At what step is it 'Too early for decomposition'?", "options": ["Understand the Problem", "Analyze the Problem", "Devising a Plan", "Review and Refine"], "answer": "Understand the Problem" },
    { "question": "When should you 'Start breaking it into sub-problems'?", "options": ["Review and Refine", "Carrying out the Plan", "Understand the Problem", "Analyze the Problem"], "answer": "Analyze the Problem" },
    { "question": "In which step should you 'Decompose fully' into step-by-step tasks?", "options": ["Understand the Problem", "Analyze the Problem", "Devising a Plan", "Review and Refine"], "answer": "Devising a Plan" },
    { "question": "When do you 'Solve each sub-problem separately and integrate'?", "options": ["Analyze the Problem", "Devising a Plan", "Carrying out the Plan", "Review and Refine"], "answer": "Carrying out the Plan" },
    { "question": "In the final 'Review and Refine' step, what is the task for decomposition?", "options": ["Verify the abstracted model", "Refine the abstraction", "Test each sub-problem", "Start breaking it down"], "answer": "Test each sub-problem" },
    { "question": "By combining abstraction and decomposition, problem-solvers can effectively manage...?", "options": ["People", "Time", "Complexity", "Budgets"], "answer": "Complexity" },
    
    // --- Segment 2: Problem Solving Steps & Examples (Questions 51-100) ---
    // G. Polya's Steps & Programming Process (51-65)
    { "question": "What is the first step in G. Polya's 4-step problem-solving process?", "options": ["Devise a Plan", "Understand the Problem", "Implement the Solution", "Review & Refine"], "answer": "Understand the Problem" },
    { "question": "What is the second step in Polya's process?", "options": ["Understand the Problem", "Review & Refine", "Devise a Plan", "Implement the Solution"], "answer": "Devise a Plan" },
    { "question": "Putting the plan into action corresponds to which of Polya's steps?", "options": ["Understand the Problem", "Devise a Plan", "Implement the Solution", "Review & Refine"], "answer": "Implement the Solution" },
    { "question": "The question 'Did it work? Can it be better?' is part of which step?", "options": ["Devise a Plan", "Review & Refine", "Understand the Problem", "Implement the Solution"], "answer": "Review & Refine" },
    { "question": "According to the notes, a problem in computing is often a task to be...?", "options": ["ignored", "made more complex", "automated", "discussed"], "answer": "automated" },
    { "question": "Problem solving is described as a ____ approach to tackle challenges.", "options": ["random", "chaotic", "haphazard", "systematic"], "answer": "systematic" },
    { "question": "The notes state that 'Every program you write is a solution to a problem' under which importance category?", "options": ["Innovation", "Efficiency", "Foundation of Programming", "Adaptability"], "answer": "Foundation of Programming" },
    { "question": "Identifying and fixing errors (bugs) is a form of problem-solving known as...?", "options": ["Debugging", "Adaptability", "Efficiency", "Innovation"], "answer": "Debugging" },
    { "question": "A problem that is familiar and has an established method for its solution is called a...", "options": ["Non-routine problem", "Complex problem", "Routine problem", "Novel problem"], "answer": "Routine problem" },
    { "question": "Sorting a list of numbers is an example of what kind of problem?", "options": ["Non-routine", "Unique", "Routine", "Ill-defined"], "answer": "Routine" },
    { "question": "A problem that is novel, unusual, and has no immediately obvious solution is called a...", "options": ["Routine problem", "Simple problem", "Non-routine problem", "Standard problem"], "answer": "Non-routine problem" },
    { "question": "Designing a novel AI algorithm is an example of what kind of problem?", "options": ["Routine", "Non-routine", "Repetitive", "Rule-based"], "answer": "Non-routine" },
    { "question": "In the 'Understand the Problem' step, 'What is given?' refers to the...?", "options": ["Outputs", "Constraints", "Inputs", "Solution"], "answer": "Inputs" },
    { "question": "In the 'Understand the Problem' step, 'What is required?' refers to the...?", "options": ["Inputs", "Outputs", "Limitations", "Edge cases"], "answer": "Outputs" },
    { "question": "Trying all possible solutions until one works is which strategy?", "options": ["Greedy Approach", "Divide and Conquer", "Brute Force", "Backtracking"], "answer": "Brute Force" },
    
    // Algorithms, Pseudocode & Data Structures (66-80)
    { "question": "What is an algorithm?", "options": ["A programming language", "A step-by-step procedure or formula for solving a problem", "A type of computer hardware", "A syntax error"], "answer": "A step-by-step procedure or formula for solving a problem" },
    { "question": "The characteristic of a good algorithm that it 'terminates after a finite number of steps' is called...?", "options": ["Correctness", "Efficiency", "Finiteness", "Definiteness"], "answer": "Finiteness" },
    { "question": "An informal high-level description of an algorithm that is language-agnostic is called...?", "options": ["Java", "A flowchart", "Pseudocode", "A compiler"], "answer": "Pseudocode" },
    { "question": "What is a Data Structure?", "options": ["A way of organizing data in a computer for efficient use", "A type of algorithm", "A programming best practice", "A software testing method"], "answer": "A way of organizing data in a computer for efficient use" },
    { "question": "Which data structure follows a LIFO (Last-In, First-Out) principle?", "options": ["Queues", "Stacks", "Arrays", "Linked Lists"], "answer": "Stacks" },
    { "question": "Which data structure follows a FIFO (First-In, First-Out) principle?", "options": ["Stacks", "Trees", "Queues", "Graphs"], "answer": "Queues" },
    { "question": "The 'Don't Repeat Yourself' (DRY) principle advises to avoid...?", "options": ["Using functions", "Writing comments", "Duplicating code", "Error handling"], "answer": "Duplicating code" },
    { "question": "Testing individual components (like functions) in isolation is called...?", "options": ["Integration Testing", "System Testing", "Unit Testing", "Acceptance Testing"], "answer": "Unit Testing" },
    { "question": "Explaining your code line-by-line to an inanimate object is a debugging technique called...?", "options": ["Print Statements", "Debugger Tools", "Logging", "Rubber Duck Debugging"], "answer": "Rubber Duck Debugging" },
    { "question": "Big O Notation, such as O(n), is used to describe an algorithm's...?", "options": ["Correctness", "Popularity", "Time or Space Complexity", "Readability"], "answer": "Time or Space Complexity" },
    { "question": "O(1) represents what kind of time complexity?", "options": ["Linear Time", "Logarithmic Time", "Constant Time", "Quadratic Time"], "answer": "Constant Time" },
    { "question": "A nested loop that grows with the square of the input size often has what time complexity?", "options": ["O(n)", "O(log n)", "O(n^2)", "O(1)"], "answer": "O(n^2)" },
    { "question": "Efficient sorting algorithms like Merge Sort typically have what time complexity?", "options": ["O(n^2)", "O(n log n)", "O(n)", "O(2^n)"], "answer": "O(n log n)" },
    { "question": "Breaking code into smaller, reusable functions is known as...?", "options": ["Commenting", "Error Handling", "Modularity", "Readability"], "answer": "Modularity" },
    { "question": "Restructuring existing computer code without changing its external behavior is called...?", "options": ["Debugging", "Refactoring", "Documenting", "Testing"], "answer": "Refactoring" },
    
    // Payroll Example & Problem Breakdown (81-100)
    { "question": "In the Simple Payroll Example, what is the first step of abstraction?", "options": ["Calculate overtime pay", "Ask the user for number of hours worked", "Output the payslip", "Calculate income tax"], "answer": "Ask the user for number of hours worked" },
    { "question": "What is the overtime rate in the payroll example?", "options": ["x1.0", "x2.0", "x1.5", "x2.5"], "answer": "x1.5" },
    { "question": "Overtime is calculated on any hours in excess of...?", "options": ["40", "35", "37", "42"], "answer": "37" },
    { "question": "What is the income tax rate for deductions?", "options": ["10%", "15%", "20%", "25%"], "answer": "20%" },
    { "question": "What is the national insurance rate for deductions?", "options": ["5%", "8%", "10%", "12%"], "answer": "8%" },
    { "question": "What two things are summed to get 'gross pay'?", "options": ["Standard wage and deductions", "Standard wage and overtime", "Overtime and income tax", "Net pay and deductions"], "answer": "Standard wage and overtime" },
    { "question": "How is 'net pay' calculated?", "options": ["Gross pay + total deductions", "Gross pay - total deductions", "Standard pay - overtime", "Income tax + national insurance"], "answer": "Gross pay - total deductions" },
    { "question": "In the payroll example, the question 'Can this problem be broken down into small sub-problems?' relates to...?", "options": ["Abstraction", "Decomposition", "Refactoring", "Testing"], "answer": "Decomposition" },
    { "question": "In the payroll flowchart, 'Calculate gross pay' is a sub-problem of...?", "options": ["Get input from user", "Calculate deductions", "Weekly wages program", "Output payslip"], "answer": "Weekly wages program" },
    { "question": "In the flowchart, 'Calculate tax' and 'Calculate national insurance' are decomposed from which main component?", "options": ["Calculate gross pay", "Calculate net pay", "Get input from user", "Calculate deductions"], "answer": "Calculate deductions" },
    { "question": "The task 'Ask the user their rate of pay' is part of which problem-solving technique in this example?", "options": ["Decomposition", "Testing", "Refining", "Abstraction"], "answer": "Abstraction" },
    { "question": "Summing together standard and overtime pay is which step in the abstracted list?", "options": ["Step 4", "Step 5", "Step 6", "Step 7"], "answer": "Step 5" },
    { "question": "What is the final step listed in the abstracted payroll process?", "options": ["Calculate net pay", "Sum total deductions", "Output the payslip to the screen", "Calculate overtime pay"], "answer": "Output the payslip to the screen" },
    { "question": "Finding the diagonal of a parallelepiped is an example of what kind of problem?", "options": ["Rate problem", "Logic puzzle", "Geometry problem", "Division problem"], "answer": "Geometry problem" },
    { "question": "In the parallelepiped problem, what formula is used to solve it?", "options": ["Newton's laws", "Pythagoras' theorem", "Quadratic formula", "Heron's formula"], "answer": "Pythagoras' theorem" },
    { "question": "In the 'Dividing the Spoils' problem, letting 'x' represent what Mary got is an example of...?", "options": ["Carrying out the plan", "Introducing a suitable notation", "Reviewing the solution", "Checking the data"], "answer": "Introducing a suitable notation" },
    { "question": "The 'Apples and Pears' problem is an example of a...?", "options": ["Rate problem", "Mathematical calculation", "Logic puzzle", "Geometry problem"], "answer": "Logic puzzle" },
    { "question": "In the 'Apples and Pears' problem, what is the key condition?", "options": ["All labels are correct", "One label is correct", "All labels are wrong", "The boxes are empty"], "answer": "All labels are wrong" },
    { "question": "The 'Rate Problem' involving a conical vessel uses which mathematical concept to find the rate of change?", "options": ["Algebra", "Trigonometry", "The derivative", "Statistics"], "answer": "The derivative" },
    { "question": "In the payroll flowchart, which component does NOT branch out into sub-problems?", "options": ["Get input from user", "Calculate gross pay", "Calculate deductions", "Output payslip"], "answer": "Output payslip" }
  ]
};