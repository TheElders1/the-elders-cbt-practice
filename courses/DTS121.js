window.quizData = {
  "title": "DTS 121 - Web Development with Django",
  "questions": [
    // --- Segment 1: Intro to Web Design & Django Setup (Questions 1-50) ---
    // Web Fundamentals (1-20)
    { "question": "What is the World Wide Web?", "options": ["The same as the Internet", "A system of interlinked documents accessed via the Internet", "A type of network cable", "A programming language"], "answer": "A system of interlinked documents accessed via the Internet" },
    { "question": "What protocol is used to transfer data between clients and servers on the web?", "options": ["FTP", "SMTP", "HTTP", "TCP/IP"], "answer": "HTTP" },
    { "question": "Which of these is NOT a core Front-End technology?", "options": ["HTML", "Python", "CSS", "JavaScript"], "answer": "Python" },
    { "question": "In Front-End development, what is the role of HTML?", "options": ["Style", "Interactivity", "Logic", "Structure"], "answer": "Structure" },
    { "question": "In Front-End development, what is the role of CSS?", "options": ["Structure", "Style", "Database management", "Authentication"], "answer": "Style" },
    { "question": "What are languages like PHP, Python (Django), and Node.js used for?", "options": ["Front-End Development", "Back-End Development", "Styling only", "Client-side logic only"], "answer": "Back-End Development" },
    { "question": "Combining front-end and back-end skills (e.g., HTML + CSS + Python + Django) is known as...?", "options": ["Client-Side Development", "Server-Side Development", "Full-Stack Development", "Web Design"], "answer": "Full-Stack Development" },
    { "question": "Who proposed the World Wide Web in 1989?", "options": ["Bill Gates", "Tim Berners-Lee", "Steve Jobs", "Vint Cerf"], "answer": "Tim Berners-Lee" },
    { "question": "What is a Web App?", "options": ["A document that runs on a server", "An application that runs in a web browser", "A type of operating system", "The physical hardware of the internet"], "answer": "An application that runs in a web browser" },
    { "question": "What does URL stand for?", "options": ["Universal Resource Link", "Uniform Resource Link", "Universal Resource Locator", "Uniform Resource Locator"], "answer": "Uniform Resource Locator" },
    { "question": "In the client-server model, the user's computer that makes a request is the...?", "options": ["Server", "Client", "Resource", "Protocol"], "answer": "Client" },
    { "question": "The computer where the web app and resources are stored is the...?", "options": ["Client", "Browser", "Server", "Font End"], "answer": "Server" },
    { "question": "Which of the following is an essential tool for web development?", "options": ["Video editing software", "Spreadsheet program", "Code editor (e.g., VS Code)", "Audio recorder"], "answer": "Code editor (e.g., VS Code)" },
    { "question": "What does 'Back-end development' primarily deal with?", "options": ["The user interface and design", "The processing, database, and logic parts of a web app", "HTML and CSS only", "The user's web browser"], "answer": "The processing, database, and logic parts of a web app" },
    { "question": "Which of these is NOT a reason 'Why Web Standards Matter'?", "options": ["Code works across all browsers", "Improves user experience", "Makes websites load slower", "Essential for modern web development"], "answer": "Makes websites load slower" },
    { "question": "In the diagram of 'What happens when you type something in a web browser', what is Step 1?", "options": ["The server finds the file", "The browser makes a request for an HTML page", "The server sends a response", "The server processes the request"], "answer": "The browser makes a request for an HTML page" },
    { "question": "The part of a web app that displays the user interface is the...?", "options": ["Back end", "Database", "Font end", "Server"], "answer": "Font end" },
    { "question": "What does HTML stand for?", "options": ["Hyper Text Makeup Language", "High-level Textual Language", "Hyper Text Markup Language", "Home Tool Markup Language"], "answer": "Hyper Text Markup Language" },
    { "question": "In HTML, what are the symbols used to 'mark up' plain text, like <h1> or <p>?", "options": ["Brackets []", "Parentheses ()", "Tags <>", "Braces {}"], "answer": "Tags <>" },
    { "question": "Which of these is a popular web browser?", "options": ["Microsoft Word", "Notepad++", "XAMPP", "Google Chrome"], "answer": "Google Chrome" },
    
    // Django Setup & Project Creation (21-50)
    { "question": "What is Django?", "options": ["A Python-based web framework", "A JavaScript library", "A database system", "A code editor"], "answer": "A Python-based web framework" },
    { "question": "A 'web framework' is described as a collection of tools that...?", "options": ["Make web development more difficult", "Abstract away difficulty and repetition", "Only handle databases", "Are only for front-end design"], "answer": "Abstract away difficulty and repetition" },
    { "question": "Which is NOT a basic functionality that websites generally require, as listed in the notes?", "options": ["connect to a database", "set URL routes", "handle security properly", "run video games"], "answer": "run video games" },
    { "question": "What is one of the top features of Django mentioned in the infographic?", "options": ["Poor Documentation", "Slow Development", "High Security", "Difficult to learn"], "answer": "High Security" },
    { "question": "Which major company is listed as a user of Django?", "options": ["Apple", "Microsoft", "Google", "Instagram"], "answer": "Instagram" },
    { "question": "What is a 'virtual environment' used for in Python projects?", "options": ["To run the computer faster", "To isolate project dependencies and avoid conflicts", "To automatically write code", "To design the user interface"], "answer": "To isolate project dependencies and avoid conflicts" },
    { "question": "What command is used to create a virtual environment named '.hellovenv'?", "options": ["python -m venv .hellovenv", "pip install venv", "django create venv", "new virtualenv .hellovenv"], "answer": "python -m venv .hellovenv" },
    { "question": "How do you activate a virtual environment on Windows?", "options": ["source .hellovenv/bin/activate", ".hellovenv\\Scripts\\activate", "run .hellovenv", "activate .hellovenv"], "answer": ".hellovenv\\Scripts\\activate" },
    { "question": "Which command installs Django into an active virtual environment?", "options": ["get Django", "pip3 install Django", "python install Django", "venv get Django"], "answer": "pip3 install Django" },
    { "question": "What command is used to create a new Django project?", "options": ["django-admin startproject myproject .", "python new project myproject", "pip install project myproject", "django createapp myproject"], "answer": "django-admin startproject myproject ." },
    { "question": "What does the dot '.' at the end of 'startproject' command signify?", "options": ["It is a typo", "It creates the project in the current directory", "It specifies the Python version", "It connects to the database"], "answer": "It creates the project in the current directory" },
    { "question": "What command runs Django's internal development server?", "options": ["python manage.py start", "django run", "python manage.py runserver", "start server"], "answer": "python manage.py runserver" },
    { "question": "By default, the Django development server runs on what URL?", "options": ["http://localhost:3000", "http://127.0.0.1:8000", "http://localhost:5000", "http://django.dev:8080"], "answer": "http://127.0.0.1:8000" },
    { "question": "What command applies database changes, such as creating initial tables for Django's built-in apps?", "options": ["python manage.py runmigrations", "python manage.py migrate", "django-admin makemigrations", "python manage.py db setup"], "answer": "python manage.py migrate" },
    { "question": "Which is NOT a step listed in the 'Summary of Steps in Starting a Django Project'?", "options": ["Create a project directory", "Activate the virtual environment", "Install Django", "Deploy to a live server"], "answer": "Deploy to a live server" },
    { "question": "If you encounter a 'scripts being disabled' error on Windows PowerShell, what command should you run as admin?", "options": ["set-executionpolicy unrestricted", "enable-scripts all", "set-executionpolicy remotesigned", "policy allow all"], "answer": "set-executionpolicy remotesigned" },
    { "question": "The first step after creating a Django projects directory is to...", "options": ["Install Django", "Create a specific project directory (e.g., helloWorldSite)", "Run the server", "Create an app"], "answer": "Create a specific project directory (e.g., helloWorldSite)" },
    { "question": "How do you quit the Django development server in the terminal?", "options": ["Type 'exit'", "Close the window", "Press CTRL+C", "Press CTRL+S"], "answer": "Press CTRL+C" },
    { "question": "What is the command to stop using a virtual environment?", "options": ["stop", "quit", "exit", "deactivate"], "answer": "deactivate" },
    { "question": "Every web app in Django must have one...", "options": ["app", "view", "project", "template"], "answer": "project" },
    { "question": "What is the purpose of the 'venv' module in Python?", "options": ["To manage databases", "To create virtual environments", "To install packages", "To run web servers"], "answer": "To create virtual environments" },
    { "question": "According to the notes, what is the first step to create a simple 'Welcome Webpage'?", "options": ["Open VSCode", "Write HTML code", "Create a folder", "Open a browser"], "answer": "Open VSCode" },
    { "question": "To create a basic skeleton HTML code automatically in VS Code, you can type '!' and then press...?", "options": ["Space", "Tab", "Enter", "Shift"], "answer": "Enter" },
    { "question": "What file extension is used for HTML files?", "options": [".css", ".js", ".py", ".html"], "answer": ".html" },
    { "question": "Django is a framework for which programming language?", "options": ["JavaScript", "Ruby", "PHP", "Python"], "answer": "Python" },
    { "question": "VS Code, Sublime Text, and Atom are examples of what?", "options": ["Web browsers", "Code editors", "Operating Systems", "Databases"], "answer": "Code editors" },
    { "question": "Why is it advisable to create a virtual environment for each Django project?", "options": ["To make the project run slower", "To use more disk space", "To manage project-specific dependencies and avoid conflicts", "To make the code harder to read"], "answer": "To manage project-specific dependencies and avoid conflicts" },
    { "question": "The 'pip' or 'pip3' command is used for what purpose?", "options": ["Creating files", "Running Python scripts", "Installing Python packages", "Navigating directories"], "answer": "Installing Python packages" },
    { "question": "What is the name of the file created by 'django-admin startproject' that is used to run various Django commands?", "options": ["project.py", "run.py", "manage.py", "settings.py"], "answer": "manage.py" },
    { "question": "After running 'migrate', what database file is created by default in the project directory?", "options": ["database.mysql", "data.db", "db.sqlite3", "project.postgre"], "answer": "db.sqlite3" },
    
    // --- Segment 2: Introduction to Django Architecture & Apps (Questions 51-100) ---
    // Django Architecture & MVT (51-70)
    { "question": "What is the very common design pattern for websites mentioned in the notes?", "options": ["Model-View-Template (MVT)", "Model-View-Controller (MVC)", "Model-Template-View (MTV)", "Controller-View-Model (CVM)"], "answer": "Model-View-Controller (MVC)" },
    { "question": "In the traditional MVC pattern, what is the role of the 'Model'?", "options": ["Renders data in a particular format", "Accepts user input", "Manages data and core business logic", "Displays HTML content"], "answer": "Manages data and core business logic" },
    { "question": "In traditional MVC, the 'Controller'...", "options": ["Manages data", "Renders data", "Accepts user input and performs application-specific logic", "Defines the database structure"], "answer": "Accepts user input and performs application-specific logic" },
    { "question": "Django's approach is more accurately described as which pattern?", "options": ["MVC", "MVTU (Model-View-Template-URL)", "MVVM", "MVP"], "answer": "MVTU (Model-View-Template-URL)" },
    { "question": "In Django's MVT pattern, the 'View' in MVC is analogous to the ____ in Django.", "options": ["View", "Model", "URL", "Template"], "answer": "Template" },
    { "question": "In Django's MVT pattern, the 'Controller' in MVC is divided into the Django 'View' and the...", "options": ["Model", "Template", "URL dispatcher", "Database"], "answer": "URL dispatcher" },
    { "question": "According to the Django Architecture diagram, what file handles the 'URL DISPATCHER' role?", "options": ["views.py", "models.py", "urls.py", "settings.py"], "answer": "urls.py" },
    { "question": "What is the role of the 'View' in Django?", "options": ["Manages database tables", "Handles the request/response logic", "Defines URL patterns", "Displays HTML content directly"], "answer": "Handles the request/response logic" },
    { "question": "The 'Model' in Django, defined in models.py, is responsible for what?", "options": ["Handling user requests", "Styling the webpage", "Managing data and the database structure", "Routing URLs"], "answer": "Managing data and the database structure" },
    { "question": "In the Django request/response cycle, what is the first component that handles an incoming HTTP Request?", "options": ["View", "Model", "URL dispatcher (urls.py)", "Template"], "answer": "URL dispatcher (urls.py)" },
    { "question": "A Django 'Template' is typically what type of file?", "options": [".py", ".css", ".js", ".html"], "answer": ".html" },
    { "question": "What is the purpose of the `__init__.py` file in a Django project directory?", "options": ["It contains all project settings", "It makes the folder a Python package", "It defines all the URLs", "It runs the development server"], "answer": "It makes the folder a Python package" },
    { "question": "Which file contains all the configuration settings for your Django project, like INSTALLED_APPS and DATABASES?", "options": ["urls.py", "manage.py", "settings.py", "views.py"], "answer": "settings.py" },
    { "question": "What does WSGI stand for?", "options": ["Web Server Gateway Interface", "Web Service Group Interface", "World-wide Server Gateway Interchange", "Web Server Grouping Initiative"], "answer": "Web Server Gateway Interface" },
    { "question": "The `manage.py` file is used to...", "options": ["Store HTML templates", "Define database models", "Execute various Django commands", "Contain the main project settings"], "answer": "Execute various Django commands" },
    { "question": "In the Django request/response cycle, what does the View combine to create the final output?", "options": ["URL and HTTP Request", "Data from the Model and the Template", "Settings and the Database", "manage.py and wsgi.py"], "answer": "Data from the Model and the Template" },
    { "question": "The purpose of `asgi.py` is to be an entry point for...?", "options": ["Traditional synchronous web servers", "Database connections", "Asynchronous web servers", "Front-end JavaScript"], "answer": "Asynchronous web servers" },
    { "question": "What does 'migrating the project' do?", "options": ["Starts the web server", "Installs Django", "Applies changes from models to the database schema", "Creates a new app"], "answer": "Applies changes from models to the database schema" },
    { "question": "According to the architecture diagram, the View (`views.py`) can interact directly with which two components?", "options": ["URL Dispatcher and Web Browser", "Template and Model", "Database and Web Browser", "URL Dispatcher and Database"], "answer": "Template and Model" },
    { "question": "The final step in the Django request/response cycle is when the view returns a...", "options": ["HTTP Request", "Database query", "URL pattern", "HTTP Response"], "answer": "HTTP Response" },
    
    // Django Apps, Views, and URLs (71-100)
    { "question": "In Django, a single top-level project can contain multiple...", "options": ["databases", "servers", "apps", "settings files"], "answer": "apps" },
    { "question": "What is the command to create a new app called 'hello_app'?", "options": ["django-admin createapp hello_app", "python manage.py newapp hello_app", "django start hello_app", "python manage.py startapp hello_app"], "answer": "python manage.py startapp hello_app" },
    { "question": "After creating an app, what is the crucial next step that MUST be done?", "options": ["Run the server", "Add the app to the INSTALLED_APPS list in settings.py", "Create a database model", "Write a template"], "answer": "Add the app to the INSTALLED_APPS list in settings.py" },
    { "question": "Which file in an app is used to handle the request/response logic?", "options": ["models.py", "admin.py", "tests.py", "views.py"], "answer": "views.py" },
    { "question": "The `migrations` directory inside an app keeps track of changes to which file?", "options": ["views.py", "urls.py", "models.py", "tests.py"], "answer": "models.py" },
    { "question": "What is a Django 'view'?", "options": ["A database table", "An HTML file", "A Python function that accepts a Web request and returns a Web response", "A URL pattern"], "answer": "A Python function that accepts a Web request and returns a Web response" },
    { "question": "To send a simple text response like 'Hello, World!' from a view, you would use which class?", "options": ["TemplateResponse", "JsonResponse", "HttpResponse", "RedirectResponse"], "answer": "HttpResponse" },
    { "question": "Every view function in Django must accept at least one argument, which is the...?", "options": ["response object", "request object", "url object", "model object"], "answer": "request object" },
    { "question": "After creating a view, it needs to be connected to a...", "options": ["Model in models.py", "Template in a templates folder", "URL pattern in urls.py", "Database in settings.py"], "answer": "URL pattern in urls.py" },
    { "question": "What is the name of the required variable in a `urls.py` file that holds the list of URL patterns?", "options": ["URL_PATTERNS", "url_patterns", "urlpatterns", "URLPATTERNS"], "answer": "urlpatterns" },
    { "question": "Which function is imported from `django.urls` to define URL routes?", "options": ["route()", "url()", "path()", "pattern()"], "answer": "path()" },
    { "question": "In `path('', home_page_view)`, what does the empty string `''` represent?", "options": ["An error", "The admin URL", "A specific page like '/home/'", "The root URL of the app"], "answer": "The root URL of the app" },
    { "question": "To connect an app's `urls.py` to the main project's `urls.py`, which function must be used?", "options": ["path()", "connect()", "link()", "include()"], "answer": "include()" },
    { "question": "In the main project's `urls.py`, what does `path('', include('hello_app.urls'))` do?", "options": ["It ignores the hello_app", "It links the project's root URL to the URL patterns defined in hello_app/urls.py", "It creates a new view", "It renames the app"], "answer": "It links the project's root URL to the URL patterns defined in hello_app/urls.py" },
    { "question": "Why would you have two `urls.py` files in a project (one for the project, one for the app)?", "options": ["It's a mistake", "To make the project harder to read", "To keep the project modular and organized", "To connect to two different databases"], "answer": "To keep the project modular and organized" },
    { "question": "When a user visits http://localhost:8000/, which `urls.py` file does Django check first?", "options": ["The app's urls.py", "The project's urls.py", "The admin's urls.py", "It checks them alphabetically"], "answer": "The project's urls.py" },
    { "question": "What is the purpose of `admin.py` inside an app?", "options": ["To define database models", "A configuration file for the built-in Django Admin app", "To handle user requests", "To test the application"], "answer": "A configuration file for the built-in Django Admin app" },
    { "question": "In `from .views import home_page_view`, what does the dot '.' signify?", "options": ["Import from the parent directory", "Import from the project directory", "Import from the same (current) directory", "It's a syntax error"], "answer": "Import from the same (current) directory" },
    { "question": "If you see the error 'Import \"django.http\" could not be resolved', what is the likely cause?", "options": ["Django is not installed", "The Python interpreter for the virtual environment is not selected in VS Code", "There is a typo in 'django.http'", "The server is not running"], "answer": "The Python interpreter for the virtual environment is not selected in VS Code" },
    { "question": "The request object passed to a view contains information like...", "options": ["The Django version", "The server's CPU usage", "The database password", "The request method (GET/POST) and headers"], "answer": "The request method (GET/POST) and headers" },
    { "question": "Which file defines the database models that Django translates into database tables?", "options": ["views.py", "models.py", "urls.py", "apps.py"], "answer": "models.py" },
    { "question": "The file `tests.py` is for...?", "options": ["Storing user data", "Configuring the project", "App-specific tests", "Defining URL routes"], "answer": "App-specific tests" },
    { "question": "The main gateway for all URL patterns in a project is the...?", "options": ["app's urls.py", "top-level project's urls.py", "views.py", "settings.py"], "answer": "top-level project's urls.py" },
    { "question": "A Django response from a view can be...", "options": ["Only HTML content", "Only a redirect", "Only a 404 error", "HTML content, a redirect, an error, an image, etc."], "answer": "HTML content, a redirect, an error, an image, etc." },
    { "question": "What is the purpose of the `apps.py` file?", "options": ["To run the application", "A configuration file for the app itself", "To list all installed apps", "To handle user views"], "answer": "A configuration file for the app itself" },
    { "question": "In the HelloWorld example, the final text 'Hello, World!' is generated by the...", "options": ["Model", "Template", "View", "URL dispatcher"], "answer": "View" },
    { "question": "What is the first step listed for creating an app?", "options": ["Add it to settings.py", "Create a urls.py file", "Run `python manage.py startapp`", "Create a view"], "answer": "Run `python manage.py startapp`" },
    { "question": "The diagram showing the relationship between `views.py`, `app/urls.py`, and `project/urls.py` illustrates...?", "options": ["Database connections", "The flow of an HTTP request through the routing system", "The project's file structure", "How to install Django"], "answer": "The flow of an HTTP request through the routing system" },
    { "question": "What does a `path()` function typically contain?", "options": ["A URL pattern and a view function", "A database query and a model", "HTML and CSS code", "A list of installed apps"], "answer": "A URL pattern and a view function" },
    { "question": "To see the 'Hello, World!' page, the final step is to...?", "options": ["Install Django again", "Create another app", "Run the development server", "Delete the database"], "answer": "Run the development server" }
  ]
};